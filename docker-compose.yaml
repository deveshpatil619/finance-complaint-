version: "3"   ##The file is written in version 3 of the Docker Compose file format.

networks:
  monitoring:              ## network named "monitoring" with the driver "bridge".
    driver: bridge                       ##  This allows the different services defined in the file to communicate with each other.


volumes:
  prometheus_data: {}      ##  three volumes named "prometheus_data", "influxdb-storage", "grafana-storage". 
  influxdb-storage: {}      ## These volumes are used to store data for the services that need them.
  grafana-storage: {}

services:
  application:     ## The "application" service is built from the local Dockerfile and runs on port 8080. 
    build: .        ## It also has environment variables that are passed to the container at runtime.
    #image: ${IMAGE_NAME}
    container_name: finance-complaint
    ports:
      - "8080:8080"
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - MONGO_DB_URL=${MONGO_DB_URL}
    volumes:
      - "./airflow/logs:/app/airflow/logs"
      
  influxdb:
    image: influxdb:1.7       ## The "influxdb" service is based on the "influxdb:1.7" image and runs on port 8086.
    container_name: influxdb  ##  It also has an environment variable that specifies the database name.
    restart: always
    expose:
      - 8086
    ports:
     - "8086:8086"
    volumes:
      - influxdb-storage:/var/lib/influxdb
    environment:
      INFLUXDB_DB: actualdb

  grafana-server:
    image: grafana/grafana-enterprise:latest    ## The "grafana-server" service is based on the "grafana/grafana-enterprise:latest" image and runs on port 3000.
                                                ##  It has an environment variable that specifies a plugin to be installed.


    container_name: grafana-server
    restart: unless-stopped
    environment:
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3000:3000"
    networks:
      - monitoring
    user: '104'
    depends_on:
      - influxdb
    volumes:
      - grafana-storage:/var/lib/grafana

  node-exporter:
    image: prom/node-exporter:latest  ## The "node-exporter" service is based on the "prom/node-exporter:latest" image and runs on port 9100. 
                                      ## It exports system metrics such as CPU, memory, disk, and network usage from a machine.
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    ports:
      - "9100:9100"
    networks:
      - monitoring

  promtail:                        
    image: grafana/promtail:2.6.1    ## The "promtail" service is based on the "grafana/promtail:2.6.1" image and runs on port 9080. 
                                    ## It allows to scrape logs and send them to Prometheus for long-term storage and analysis.
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - "./airflow/logs:/app/log/"
      - "./docker-compose-resource/promtail:/etc/promtail/"
    command: -config.file=/etc/promtail/config.yml
    ports:
     - "9080:9080"
    networks:
      - monitoring

  loki:                             ## The "loki" service is based on the "grafana/loki:2.6.1" image and runs on port 3101.
                                    ##  It is an open-source log aggregation and querying system
    image: grafana/loki:2.6.1
    container_name: loki
    ports:
      - "3101:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - "./docker-compose-resource/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    expose:
      - 9090
    ports:
      - "9091:9090"
    networks:
      - monitoring
      ## The service is based on the "prom/prometheus:latest" image, which is the official Prometheus image.
      ##The container is given the name "prometheus" for easier identification.
      ##The service is set to restart automatically unless stopped, this ensures that the service is always running.
      ##The service uses two volumes:
      ##"./docker-compose-resource/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml", this volume mounts the local file "prometheus.yml" to the "/etc/prometheus" directory in the container.
      ##"prometheus_data:/prometheus", this volume uses the volume named "prometheus_data" that was defined earlier in the file to store data for the prometheus service.
      ##The command section specifies several command line options to configure Prometheus.
      ##'--config.file=/etc/prometheus/prometheus.yml' specifies the location of the Prometheus configuration file.
      ##'--storage.tsdb.path=/prometheus' specifies the directory for storing time series data.
      ##'--web.console.libraries=/etc/prometheus/console_libraries' and '--web.console.templates=/etc/prometheus/consoles' specify the directories for storing Prometheus console libraries and templates.
      ##'--web.enable-lifecycle' enables the Prometheus lifecycle feature, which allows for more fine-gr